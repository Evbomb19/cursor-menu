{"entries":[{"timestamp":1746544215507,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":8354,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":74,"length1":53,"diffs":[[1,"        \"device\": \"*\"\n"]]},{"start1":210,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1746544384077,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":157,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]}]},{"timestamp":1746734803284,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":241,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1746544215506,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Cursor Menu\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1746734803284,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\n\n\n\n\nnamespace cursormenu {\n\n    export function readInstructions() {\n        game.splash(\"This is a custom menu that\", \"uses the browser cursor\");\n        game.splash(\"You'll need to import the\", \"browser events extension\");\n        game.splash(\"When you click on a button\", \"it's action will be called\");\n        game.splash(\"In order to change a\", \"button inside it's action\");\n        game.splash(\"You will need to use it's\", `menu's \"get\" function`);\n        game.splash(\"Also, use showText instead\", \"of game.splash\");\n        game.splash(\"Give me feedback on\", \"what to improve!\");\n        game.splash(\"Hope you enjoy!   :)\");\n    }\n\n    export class Button extends Sprite {\n        public text: String;\n        public action: Function;\n        public moveWhenPressed: boolean;\n        public inMenu: Menu;\n        public defaultImage: Image;\n\n        constructor(img: Image, x: number, y: number, z: number, action: Function, text?: string, moveWhenPressed?: boolean) {\n            let defaultImg = img.clone();\n            img.printCenter(text, img.height / 2 - 3, 1, image.font5);\n            super(img);\n\n            this.defaultImage = defaultImg;\n\n            this.setFlag(SpriteFlag.Ghost, true);\n            this.setFlag(SpriteFlag.Invisible, true);\n\n            if (text == undefined) {\n                text = \"\";\n            }\n            if (moveWhenPressed == undefined) {\n                moveWhenPressed = true;\n            }\n\n            this.setPosition(x, y);\n            this.text = text;\n            this.moveWhenPressed = moveWhenPressed;\n            this.z = z;\n            this.action = action;\n\n            this.action = function () {\n                action();\n            }\n        }\n\n        public setText(text: string) {\n            this.text = text;\n            let img = this.defaultImage.clone();\n            img.printCenter(text, img.height / 2 - 3, 1, image.font5);\n            this.setImage(img);\n            return this;\n        }\n        public setAction(action: Function) {\n            this.action = action;\n            return this;\n        }\n        public addToAction(addition: Function) {\n            this.action = function () {\n                this.action();\n                addition();\n            }\n            return this;\n        }\n\n        public toString() {\n            if (this.text.length == 0) {\n                return this.x + \", \" + this.y;\n            }\n            return this.text + \", \" + this.x + \", \" + this.y;\n        }\n    }\n\n    export class Menu {\n        public buttons: Button[];\n        public title: String;\n        public isOpen = false;\n        public enabled = true;\n\n        constructor(buttons: Button[], title?: String) {\n            this.buttons = buttons;\n            if (title == undefined) {\n                title = \"\";\n            }\n            this.title = title;\n            for (let b of this.buttons) {\n                b.inMenu = this;\n            }\n            this.open();\n            menus.push(this);\n        }\n\n        public open() {\n            if (this.isOpen) {\n                return;\n            }\n            for (let i = 0; i < this.buttons.length; i++) {\n                let b = this.buttons[i];\n                b.setFlag(SpriteFlag.Ghost, false);\n                b.setFlag(SpriteFlag.Invisible, false);\n            }\n            this.isOpen = true;\n        }\n        public close() {\n            if (!this.isOpen) {\n                return;\n            }\n            for (let i = 0; i < this.buttons.length; i++) {\n                let b = this.buttons[i];\n                b.setFlag(SpriteFlag.Ghost, true);\n                b.setFlag(SpriteFlag.Invisible, true);\n            }\n            this.isOpen = false;\n        }\n\n        public get(index: number) {\n            return this.buttons.get(index);\n        }\n        public addButton(button: Button) {\n            this.buttons.push(button);\n        }\n        public removeButton(button: Button) {\n            this.buttons.removeElement(button);\n        }\n        public removeIndex(index: number) {\n            this.buttons.removeAt(index);\n        }\n\n        public disable() {\n            this.enabled = false;\n        }\n        public enable() {\n            this.enabled = true;\n        }\n        public setEnabled(enabled: boolean) {\n            this.enabled = enabled;\n        }\n\n        public discard() {\n            menus.removeElement(this);\n        }\n\n        public toString() {\n            let s = \"\";\n            for (let i = 0; i < this.buttons.length; i++) {\n                s += this.buttons.get(i).toString();\n                if (i < this.buttons.length - 1) {\n                    s += \"\\n\";\n                }\n            }\n            return s;\n        }\n    }\n\n    let menus: Menu[] = [];\n    export function getMenus() {\n        return menus;\n    }\n\n    export function newMenu(buttons: Button[]) {\n        return new Menu(buttons);\n    }\n    export function newButton(img: Image, x: number, y: number, z: number, action: Function, text?: string, moveWhenPressed?: boolean) {\n        return new Button(img, x, y, z, action, text, moveWhenPressed);\n    }\n    export function showText(topText: string, bottomText: string) {\n        let enabledMenus: Menu[] = [];\n        for (let m of menus) {\n            if (m.enabled == true) {\n                enabledMenus.push(m);\n                m.disable();\n            }\n        }\n        game.splash(topText, bottomText);\n        for (let m of enabledMenus) {\n            m.enable();\n        }\n    }\n\n    let cursor = img`\n        1 . . . . . .\n        1 1 . . . . .\n        1 f 1 . . . .\n        1 f f 1 . . .\n        1 f f f 1 . .\n        1 f f f f 1 .\n        1 f f f f f 1\n        1 f f f f f 1\n        1 f f f f 1 .\n        1 f 1 f f 1 .\n        . 1 . 1 f f 1\n        . . . 1 f f 1\n        . . . . 1 1 .\n    `;\n    game.setDialogCursor(cursor);\n    export function cursorImage() {\n        return cursor;\n    }\n\n\n    let noButtonPressed: Function = function () { };\n    export function ifNoButtonPressed(funct: () => {}) {\n        noButtonPressed = funct;\n    }\n\n\n    let buttonPressed: Button;\n    let leftClickPressA = true;\n\n    export function leftClickPressesA(pressA: boolean) {\n        leftClickPressA = pressA;\n    }\n\n    browserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Pressed, function (x: number, y: number) {\n        if (leftClickPressA) {\n            controller.A.setPressed(true);\n        }\n        let overlap = false;\n        let mousePos = sprites.create(img`1`);\n        mousePos.setPosition(x, y);\n        for (let m of menus) {\n            if (m.isOpen && m.enabled) {\n                for (let b of m.buttons) {\n                    if (b.overlapsWith(mousePos)) {\n                        overlap = true;\n                        mousePos.destroy();\n                        if (b.moveWhenPressed) {\n                            b.y += 2;\n                        }\n                        buttonPressed = b;\n                        return;\n                    }\n                }\n            }\n        }\n        mousePos.destroy();\n        if (!overlap) {\n            noButtonPressed();\n        }\n    });\n    browserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Released, function (x: number, y: number) {\n        if (leftClickPressA) {\n            controller.A.setPressed(false);\n        }\n        if (buttonPressed != null) {\n            let mousePos = sprites.create(img`1`);\n            mousePos.setPosition(x, y);\n            if (mousePos.overlapsWith(buttonPressed)) {\n                mousePos.destroy();\n                if (buttonPressed.moveWhenPressed) {\n                    buttonPressed.y -= 2;\n                }\n                let a = buttonPressed.action;\n                buttonPressed = null;\n                a();\n            }\n            mousePos.destroy();\n        }\n    });\n    browserEvents.onMouseMove(function (x: number, y: number) {\n        if (buttonPressed != null && browserEvents.MouseLeft.isPressed()) {\n            let mousePos = sprites.create(img`1`);\n            mousePos.setPosition(x, y);\n            if (!mousePos.overlapsWith(buttonPressed)) {\n                if (buttonPressed.moveWhenPressed) {\n                    buttonPressed.y -= 2;\n                }\n                buttonPressed = null;\n            }\n            mousePos.destroy();\n        }\n    });\n}","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Cursor Menu\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1746734803289}